plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.trading'
version = '0.0.1-SNAPSHOT'
description = 'backend'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation("jakarta.persistence:jakarta.persistence-api:3.2.0")
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:3.5.5")
    // https://mvnrepository.com/artifact/org.hibernate.orm/hibernate-core
    implementation("org.hibernate.orm:hibernate-core:7.1.0.Final")

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation("org.apache.commons:commons-lang3:3.18.0")

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
    implementation("org.springframework.boot:spring-boot-starter-validation:3.5.5")

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register("compileNativeLibrary",Exec) {
    def sourceDir = "$projectDir/src/main/c"
    def outputDir = "$projectDir/libs"


    def isMacos = System.getProperty("os.name").toLowerCase().contains("mac")
    def isLinux = System.getProperty("os.name").toLowerCase().contains("nix") || System.getProperty("os.name").toLowerCase().contains("nux")
    def isWindows = System.getProperty("os.name").toLowerCase().contains("win")

    // Cài đặt thư mục làm việc và lệnh build cho từng OS
    workingDir "$projectDir/src/main/c"

    if (isMacos) {
        // Lệnh GCC dành cho macOS
        commandLine 'gcc', '-I', "${System.getenv('JAVA_HOME')}/include", '-I', "${System.getenv('JAVA_HOME')}/include/darwin", '-shared', '-o', "${projectDir}/libs/libmetricscpu.dylib", '-fPIC', 'metricscpu.c'
    } else if (isLinux) {
        // Lệnh GCC dành cho Linux
        commandLine 'gcc', '-I', "${System.getenv('JAVA_HOME')}/include", '-I', "${System.getenv('JAVA_HOME')}/include/linux", '-shared', '-o', "${projectDir}/libs/libmetricscpu.dylib", '-fPIC', 'metricscpu.c'
    } else if (isWindows) {
        // Lệnh GCC dành cho Windows (nếu cần)
        commandLine 'gcc', '-I', "${System.getenv('JAVA_HOME')}\\include", '-I', "${System.getenv('JAVA_HOME')}\\include\\win32", '-shared', '-o', "${projectDir}/libs/libmetricscpu.dylib", '-fPIC', 'metricscpu.c'
    } else {
        throw new GradleException("Unsupported operating system: ${System.getProperty('os.name')}")
    }

    // Đảm bảo thư mục đầu ra tồn tại
    doFirst {
        mkdir "$projectDir/libs"
    }

}

// Thêm bước `compileC` trước khi run ứng dụng
tasks.withType(JavaExec) {
    dependsOn compileNativeLibrary

}


bootRun {
    // Add individual JVM arguments
    jvmArgs = [
            "-Djava.library.path=$projectDir/libs",
    ]
}


